package com.github_old.codegenerator.prototojava;

import com.github_old.codegenerator.prototojava.buildertype.BuilderTypeCodeGenerator;
import com.github_old.codegenerator.prototojava.normaltype.NormalTypeCodeGenerator;
import com.github_old.enums.MappingType;
import com.github_old.model.ElementNode;
import com.github_old.parser.java.JavaParser;
import com.github_old.parser.proto.ProtoParser;
import com.github_old.utils.JavaCommandUtils;
import com.intellij.psi.JavaPsiFacade;
import com.intellij.psi.search.GlobalSearchScope;

import java.util.List;

public class ProtoToJavaCodeGenerator {
    public String generateMappingCode(String protoFileName, String protoQualifiedMessageName, String protoJavaOuterClassQualifiedName,
                                      String protoObjectVariableName,
                                      String javaQualifiedClassName, JavaPsiFacade javaPsiFacade,
                                      GlobalSearchScope globalSearchScope, MappingType mappingType) {

        ProtoParser protoParser = new ProtoParser();
        JavaParser javaParser = JavaParser.builder()
                .javaPsiFacade(javaPsiFacade)
                .globalSearchScope(globalSearchScope)
                .build();

        List<ElementNode> protoElementTree = protoParser.parse(protoJavaOuterClassQualifiedName, protoFileName, protoQualifiedMessageName);
        List<ElementNode> javaElementTree = javaParser.parse(javaQualifiedClassName);

        if (javaElementTree.size() == 0 || protoElementTree.size() == 0)
            return "";

        StringBuilder result = new StringBuilder();

        if (mappingType == MappingType.BUILDER) {
            BuilderTypeCodeGenerator builderTypeCodeGenerator = new BuilderTypeCodeGenerator();
            String mappingCode = builderTypeCodeGenerator.generateMappingCode(protoElementTree, javaElementTree, protoObjectVariableName, javaQualifiedClassName);
            result.append(mappingCode);
        } else {
            NormalTypeCodeGenerator normalTypeCodeGenerator = new NormalTypeCodeGenerator();
            String mappingCode = normalTypeCodeGenerator.generateMappingCode(protoElementTree, javaElementTree, protoObjectVariableName, javaQualifiedClassName);
            result.append(mappingCode);
        }

        // EOC
        result.append(JavaCommandUtils.eoc());

        result.append("\n // Generated by mapping-generator !!! \n");

        return result.toString();
    }
}
