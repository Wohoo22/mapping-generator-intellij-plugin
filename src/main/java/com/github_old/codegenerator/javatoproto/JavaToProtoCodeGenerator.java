package com.github_old.codegenerator.javatoproto;

import com.github_old.codegenerator.javatoproto.subgenerator.ObjectMappingGenerator;
import com.github_old.model.ElementNode;
import com.github_old.parser.java.JavaParser;
import com.github_old.parser.proto.ProtoParser;
import com.github_old.utils.JavaCommandUtils;
import com.intellij.psi.JavaPsiFacade;
import com.intellij.psi.search.GlobalSearchScope;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class JavaToProtoCodeGenerator {
    public String generateMappingCode(String javaQualifiedClassName, String javaObjectVariableName, JavaPsiFacade javaPsiFacade, GlobalSearchScope globalSearchScope,
                                      String protoFileName, String protoMessageQualifiedName, String protoJavaOuterClassName) {

        JavaParser javaParser = JavaParser.builder()
                .globalSearchScope(globalSearchScope)
                .javaPsiFacade(javaPsiFacade)
                .build();
        ProtoParser protoParser = new ProtoParser();

        List<ElementNode> javaElementTree = javaParser.parse(javaQualifiedClassName);
        List<ElementNode> protoElementTree = protoParser.parse(protoJavaOuterClassName, protoFileName, protoMessageQualifiedName);

        if (javaElementTree.size() == 0 || protoElementTree.size() == 0)
            return "";

        StringBuilder result = new StringBuilder();

        String protoQualifiedJavaClassName = protoJavaOuterClassName + "." + protoMessageQualifiedName;

        // used var name
        Set<String> usedVariableName = new HashSet<>();

        // generate mapping for object
        ObjectMappingGenerator objectMappingGenerator = new ObjectMappingGenerator();
        String objectMappingCode = objectMappingGenerator.generateMappingCode(protoElementTree, javaElementTree, javaObjectVariableName,
                protoQualifiedJavaClassName, "", usedVariableName);
        result.append(objectMappingCode);

        // EOC
        result.append(JavaCommandUtils.eoc());

        result.append("\n // Generated by mapping-generator !!! \n");

        return result.toString();
    }
}
