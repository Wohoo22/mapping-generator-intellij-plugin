package com.github_old.codegenerator.javatojava;

import com.github_old.codegenerator.javatojava.buildertype.BuilderTypeCodeGenerator;
import com.github_old.codegenerator.javatojava.normaltype.NormalTypeCodeGenerator;
import com.github_old.enums.MappingType;
import com.github_old.model.ElementNode;
import com.github_old.parser.java.JavaParser;
import com.intellij.psi.JavaPsiFacade;
import com.intellij.psi.search.GlobalSearchScope;
import lombok.Builder;

import java.util.List;

@Builder
public class JavaToJavaCodeGenerator {
    private final String objectToSetQualifiedName;
    private final String objectToGetVariableName;
    private final String objectToGetQualifiedName;
    private final JavaPsiFacade javaPsiFacade;
    private final GlobalSearchScope globalSearchScope;
    private final MappingType mappingType;

    public String generateMappingCode() {

        JavaParser setParser = JavaParser.builder()
                .javaPsiFacade(javaPsiFacade)
                .globalSearchScope(globalSearchScope)
                .build();
        List<ElementNode> elementsToSet = setParser.parse(objectToSetQualifiedName);
        JavaParser getParser = JavaParser.builder()
                .javaPsiFacade(javaPsiFacade)
                .globalSearchScope(globalSearchScope)
                .build();
        List<ElementNode> elementsToGet = getParser.parse(objectToGetQualifiedName);

        if (elementsToGet.size() == 0 || elementsToSet.size() == 0)
            return "";

        StringBuilder result = new StringBuilder();

        if (mappingType == MappingType.BUILDER) {
            BuilderTypeCodeGenerator builderTypeCodeGenerator = BuilderTypeCodeGenerator.builder()
                    .elementsToGet(elementsToGet)
                    .elementsToSet(elementsToSet)
                    .objectToGetVariableName(objectToGetVariableName)
                    .objectToSetQualifiedName(objectToSetQualifiedName)
                    .build();
            String mappingCode = builderTypeCodeGenerator.generateMappingCode();
            result.append(mappingCode);
        } else {
            NormalTypeCodeGenerator normalTypeCodeGenerator = NormalTypeCodeGenerator.builder()
                    .elementsToGet(elementsToGet)
                    .elementsToSet(elementsToSet)
                    .objectToGetVariableName(objectToGetVariableName)
                    .objectToSetQualifiedName(objectToSetQualifiedName)
                    .build();
            String mappingCode = normalTypeCodeGenerator.generateMappingCode();
            result.append(mappingCode);
        }

        result.append("\n // Generated by mapping-generator !!! \n");

        return result.toString();
    }


}
