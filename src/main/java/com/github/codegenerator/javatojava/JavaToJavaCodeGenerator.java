package com.github.codegenerator.javatojava;

import com.github.codegenerator.javatojava.buildertype.BuilderTypeCodeGenerator;
import com.github.codegenerator.javatojava.normaltype.NormalTypeCodeGenerator;
import com.github.enums.MappingType;
import com.github.model.ElementNode;
import com.github.parser.java.JavaParser;
import com.intellij.psi.JavaPsiFacade;
import com.intellij.psi.search.GlobalSearchScope;

import java.util.List;

public class JavaToJavaCodeGenerator {

    public String generateMappingCode(String objectToSetQualifiedName, String objectToGetVariableName, String objectToGetQualifiedName,
                                      JavaPsiFacade javaPsiFacade, GlobalSearchScope globalSearchScope, MappingType mappingType) {

        JavaParser javaParser = new JavaParser();

        List<ElementNode> elementsToSet = javaParser.parse(objectToSetQualifiedName, javaPsiFacade, globalSearchScope);
        List<ElementNode> elementsToGet = javaParser.parse(objectToGetQualifiedName, javaPsiFacade, globalSearchScope);

        if (elementsToGet.size() == 0 || elementsToSet.size() == 0)
            return "";

        StringBuilder result = new StringBuilder();

        if (mappingType == MappingType.BUILDER) {
            BuilderTypeCodeGenerator builderTypeCodeGenerator = new BuilderTypeCodeGenerator();
            String mappingCode = builderTypeCodeGenerator.generateMappingCode(elementsToGet, elementsToSet, objectToGetVariableName, objectToSetQualifiedName);
            result.append(mappingCode);
        } else {
            NormalTypeCodeGenerator normalTypeCodeGenerator = new NormalTypeCodeGenerator();
            String mappingCode = normalTypeCodeGenerator.generateMappingCode(elementsToGet, elementsToSet, objectToGetVariableName, objectToSetQualifiedName);
            result.append(mappingCode);
        }

        result.append("\n // Generated by mapping-generator !!! \n");

        return result.toString();
    }


}
